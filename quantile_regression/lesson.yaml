- Class: meta
  Course: CS112
  Lesson: Quantile Regression
  Author: Aboozar Hadavand
  Type: Standard
  Organization: Minerva University
  Version: 2.4.5
  
- Class: text
  Output: Welcome to the CS112 Swirl lesson on Quantile Regression. 
      Please note that you can use the function rpt() to go back to the
      previous question. To end your Swirl session, you can type bye().
      After you exit a lesson, you can always resume a lesson by typing 
      swirl() again. However, make sure you use the same name you always use!
      
- Class: text
  Output: Lucky for you, the data is automatically loaded and is in your environment.
      The object is called `peacekeeping`. All the missing values are already removed.

- Class: exact_question
  Output: How many observations are in the dataset?
  CorrectAnswer: 122
  AnswerTests: omnitest(correctVal = 122)
  Hint: Do you really need a hint for this?
  
- Class: cmd_question
  Output: Use code to look at the first few rows of the dataset.
  CorrectAnswer: head(peacekeeping)
  AnswerTests: omnitest(correctExpr='head(peacekeeping)')
  Hint: Use your head :)
  
- Class: mult_question
  Output: The outcome variable is pbs2s3. What kind of a variable do you think it is?
  AnswerChoices: Binary;Continuous;Character;Logical
  CorrectAnswer: Binary
  AnswerTests: omnitest(correctVal='Binary')
  Hint: You may have to leave swirl to be able to run your code. Once your ran
      type swirl() and the same name you used initially to pick up where you 
      left.
  
- Class: mult_question
  Output: Since your variable is binary, what function is best for running
      logisting regression in R?
  AnswerChoices: glm();glm() with attribute family set to binomial;lm();lm() with attribute family set to binomial
  CorrectAnswer: glm() with attribute family set to binomial
  AnswerTests: omnitest(correctVal='glm() with attribute family set to binomial')
  Hint: Look at your notes for the class on logistic regression.
  
- Class: exact_question
  Output: Your treatment variabls is untype4. How many 
      observations are in the treatment group?
  CorrectAnswer: 7
  AnswerTests: omnitest(correctVal = 7)
  Hint: 
  
- Class: cmd_question
  Output: Now, estimate the effect of treatment (untype4) on the outcome (pbs2s3) using the covariates
      'wartype + logcost + wardur + factnum + factnum2 + trnsfcap +  treaty + develop + exp + decade'
      using a logistic regression in the order they appear here and assign it
      to an object called simple_reg.
  CorrectAnswer: simple_reg <- glm(pbs2s3 ~ untype4 + wartype + logcost + wardur + factnum + factnum2 + trnsfcap + treaty + develop + exp + decade, family= binomial, data = peacekeeping)
  AnswerTests: any_of_exprs('simple_reg <- glm(pbs2s3 ~ untype4 + wartype + logcost + wardur + factnum + factnum2 + trnsfcap + treaty + develop + exp + decade, family= binomial, data = peacekeeping)', 'simple_reg <- glm(peacekeeping$pbs2s3 ~ peacekeeping$untype4 + peacekeeping$wartype + peacekeeping$logcost + peacekeeping$wardur + peacekeeping$factnum + peacekeeping$factnum2 + peacekeeping$trnsfcap + peacekeeping$treaty + peacekeeping$develop + peacekeeping$exp + peacekeeping$decade, family= binomial)')
  Hint: Make sure you use '<-' for assignment and not '='.
  
- Class: cmd_question
  Output: Look at the summary of your regression.
  CorrectAnswer: summary(simple_reg)
  AnswerTests: omnitest(correctExpr='summary(simple_reg)')
  Hint: 

- Class: mult_question
  Output: Is the coefficient on untype4 statistically significant at 95%?
  AnswerChoices: Yes;No;Not enough information
  CorrectAnswer: Yes
  AnswerTests: omnitest(correctVal='Yes')
  Hint: You can look at the summary of your regression or use the command confint(simple_reg)! 
      You may have to leave swirl to be able to run your code. Once your ran
      type swirl() and the same name you used initially to pick up where you 
      left.

- Class: cmd_question
  Output: Now, we are going to use genetic matching algorithm to perform matching.
      Load the package Matching. 
  CorrectAnswer: library(Matching)
  AnswerTests: omnitest(correctExpr='library(Matching)')
  Hint: 

- Class: text
  Output: Remember, GenMatch uses the rgenoud genetic
      algorithm, so you might need to execute the following 
      install.packages("rgenoud") and then library(rgenoud). 
      Hit enter to continue.
  
- Class: cmd_question
  Output: For your convenience, we have already created a subset of the data
      that only contains the 10 covariates you need to match on. This data set is
      called X. Use X and the treatment variable (untype4) to find the weights from
      the genetic matching algorithm and assign the result to an object called genout.
      Leave all other parameters as their default values.
  CorrectAnswer: genout <- GenMatch(X = X, Tr = peacekeeping$untype4)
  AnswerTests: any_of_exprs('genout <- GenMatch(X = X, Tr = peacekeeping$untype4)', 'genout <- GenMatch(Tr = peacekeeping$untype4, X = X)')
  Hint: 
  
- Class: exact_question
  Output: In what generation was the solution found?
  CorrectAnswer: 1
  AnswerTests: omnitest(correctVal = 1)
  Hint: This should be displayed when you run the GenMatch() function.

- Class: cmd_question
  Output: Now that we have the weight, use them in the Match function to match 
      your data based on the covariates and assign the result to an object called matchout.gen.
  CorrectAnswer: matchout.gen <- Match(X = X, Tr = peacekeeping$untype4, Y = peacekeeping$pbs2s3, Weight.matrix=genout)
  AnswerTests: any_of_exprs('matchout.gen <- Match(Y = peacekeeping$pbs2s3, X = X, Tr = peacekeeping$untype4, Weight.matrix=genout)', 'matchout.gen <- Match(Y = peacekeeping$pbs2s3, Tr = peacekeeping$untype4, X = X, Weight.matrix=genout)')
  Hint: Don't forget to include the covariate subset X and your outcome variable. Don't specify any other element in your Match() function.
  
- Class: text
  Output: You can obtain the potential outcomes both under treatment and under
      no treatment by finding the indices of matched units using matchout.gen$index.treated
      and matchout.gen$index.control.

- Class: exact_question
  Output: What is the average treatment effect? (round to two decimals)
  CorrectAnswer: 0.43
  AnswerTests: omnitest(correctVal = 0.43)
  Hint: Use the mean function.

- Class: exact_question
  Output: What is the median treatment effect? (round to two decimals)
  CorrectAnswer: 1
  AnswerTests: omnitest(correctVal = 1)
  Hint: Use the median function.
  
- Class: text
  Output: Congratulations! You have finished the first part of this exercise.
      In this exercise, we will learn how to do quantile regression in R.
      Hit enter to continue.
      
- Class: text
  Output: Quantile regression is a regression method for estimating these
      conditional quantile functions. Just as linear regression estimates 
      the conditional mean function as a linear combination of the predictors, 
      quantile regression estimates the conditional quantile function as 
      a linear combination of the predictors.
      
- Class: cmd_question
  Output: We can perform quantile regression in R easily with the 'quantreg' package.
      First, install the package.
  CorrectAnswer: install.packages("quantreg")
  AnswerTests: omnitest(correctExpr='install.packages("quantreg")')
  Hint: 
  
- Class: cmd_question
  Output: Then load the package.
  CorrectAnswer: library(quantreg)
  AnswerTests: any_of_exprs('library("quantreg")', 'library(quantreg)')
  Hint: 
  
- Class: text
  Output: We are going to use the 'mtcars' data that comes with R. The data
      is alreay loaded in your environment.
      
- Class: text
  Output: We can perform quantile regression using the 'rq' function in the
      package 'quantreg'. We can specify a 'tau' option which tells 'rq' 
      which conditional quantile we want. The default value for 'tau' 
      is 0.5 which corresponds to median regression. To fit a quantile
      regression of miles per gallon vs. car weight we use 
      'rqfit <- rq(mpg ~ wt, data = mtcars)'
      
- Class: cmd_question
  Output: Look at the summary of the result but using the object we 
      created above (rqfit).
  CorrectAnswer: summary(rqfit)
  AnswerTests: omnitest(correctExpr='summary(rqfit)')
  Hint: 

- Class: text
  Output: In the table above, the 'lower bd' and 'upper bd' columns
      represent the endpoints of confidence intervals for the model 
      coefficients.
      
- Class: cmd_question
  Output: Now that you learned how to use the 'rq' function,
  find the quantile effect for the first quartile (tau = 0.25)!
  CorrectAnswer: rq(mpg ~ wt, data = mtcars, tau = 0.25)
  AnswerTests: omnitest(correctExpr='rq(mpg ~ wt, data = mtcars, tau = 0.25)')
  Hint: Did you type 0.25 or .25? :)

- Class: figure
  Output: We can also plot the quantile regression line using the 'plot' and
      'abline' functions in R. 
      plot(mpg ~ wt, data = mtcars, pch = 16, main = "mpg ~ wt")
      abline(lm(mpg ~ wt, data = mtcars), col = "red", lty = 2)
      abline(rq(mpg ~ wt, data = mtcars), col = "blue", lty = 2)
      legend("topright", legend = c("lm", "rq"), col = c("red", "blue"), lty = 2)
      The quantile regression line is in blue and the linear regression line is
      in red.
  Figure: plot_qr.R
  FigureType: new
  
- Class: text
  Output: Median regression (i.e. 50th quantile regression) is sometimes
  preferred to linear regression because it is 'robust to outliers'.

- Class: mult_question
  Output: "Would you like the code-generator to generate a code for you?"
  AnswerChoices: Yes;No
  CorrectAnswer: NULL
  AnswerTests: cs112_credit(941, "ql")
  Hint:

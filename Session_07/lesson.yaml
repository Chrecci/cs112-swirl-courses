- Class: meta
  Course: CS112
  Lesson: Session 7 Presenting Regression Results
  Author: Michael Chen
  Type: Standard
  Organization: Minerva University
  Version: 2.4.5
  
- Class: text
  Output: Welcome to the Swirl lesson for CS112 Session 7, Presenting Regression Results. 
      Please note that you can use the function rpt() to go back to the
      previous question. To end your Swirl session, you can type bye().
      After you exit a lesson, you can always resume a lesson by typing 
      swirl() again. However, make sure you use the same name you always use!

- Class: video
  Output: In this lesson, you will practice two examples where a for loop iteratively calculates a value and saves the value to a storage vector. 
      Use the documentation as needed. Do you want to go to the link?
  VideoLink: https://rpubs.com/brouwern/for_i_in_R

- Class: cmd_question
  Output: First load the package Matching. If you haven't installed it yet, you
      should install it first.
  CorrectAnswer: library(Matching)
  AnswerTests: any_of_exprs('library(Matching)', 'library("Matching")')
  Hint: After installation, use the library() function.
  
- Class: cmd_question
  Output: First load the package arm. If you haven't installed it yet, you
      should install it first.
  CorrectAnswer: library(arm)
  AnswerTests: any_of_exprs('library(arm)', 'library("arm")')
  Hint: After installation, use the library() function.

- Class: cmd_question
  Output: Let's start with a simple example. First, we create a storage vector. 
      Use the rep() function and create 20 NA values, storing it to an object called store1. 
  CorrectAnswer: store1 <- rep(NA, 20)
  AnswerTests: any_of_exprs('store1 <- rep(NA, 20)')
  Hint: Fill in the argument for rep().
  
- Class: cmd_question
  Output: Let's take a look at our storage vector.
  CorrectAnswer: store1
  AnswerTests: any_of_exprs('store1')
  Hint: Just type the name of the storage vector.

- Class: cmd_question
  Output: Next, let's create a for loop that calculates the value 
      i^2 + 2i + 4, where i is the index of the storage vector.
      We will save the result to the storage vector we just created.
      Copy and paste the following code but also try to understand what
      it's doing, for (i in 1:length(store1)){store1[i] <- i^2 + 2*i + 4}
  CorrectAnswer: for (i in 1:length(store1)){store1[i] <- i^2 + 2*i + 4}
  AnswerTests: any_of_exprs('for (i in 1:length(store1)){store1[i] <- i^2 + 2*i + 4}')
  Hint: Just copy and paste the suggested code!

- Class: cmd_question
  Output: Let's load the lalonde data from the packate Matching.
  CorrectAnswer: data(lalonde)
  AnswerTests: any_of_exprs('data(lalonde)')
  Hint: Use the data() function.
  
- Class: cmd_question
  Output: Recall the simulation we ran from a few sessions ago. 
      Let's first run a regression of the variable re78 on the variable age.
      Assign the result to an object called lm1.
  CorrectAnswer: lm1 <- lm(re78 ~ age, data=lalonde)
  AnswerTests: any_of_exprs('lm1 <- lm(re78 ~ age, data=lalonde)', 'lm1 <- lm(lalonde$re78 ~ lalonde$age)')
  Hint: Make sure you use the lm function and use "<-" for assignment.
      Also make sure you assigned the result to an object called lm1.

- Class: cmd_question
  Output: Now, let's use the sim function to generate 100 simulated coefficients
      using the regression we just ran. Assign the result to an object called
      sim_results.
  CorrectAnswer: sim_results <- sim(lm1, n.sims = 100)
  AnswerTests: any_of_exprs('sim_results <- sim(lm1, n.sims = 100)', 'sim_results <- sim(lm1, 100)')
  Hint: Use the object lm1 from the previous step. Make sure you assign the results
      to an object called sim_results.
  
- Class: cmd_question
  Output: Let's take a look at the simulated coefficients, using sim_results@coef
  CorrectAnswer: sim_results@coef
  AnswerTests: any_of_exprs('sim_results@coef')
  Hint: 

- Class: text
  Output: Each row represents a simulation, with an intercept and coefficients 
      for the variable age. To select specific values from the simulated, we 
      can use the indexing, sim_results@coef[x, y], where x is the row and y 
      is the column. For example, if we want the age coefficient for the 
      5th simulation, we would type sim_results@coef[5, 2]. 

- Class: cmd_question
  Output: Write code that calculates the average of the simulated coefficients
      on age (the second column).
  CorrectAnswer: mean(sim_results@coef[, 2])
  AnswerTests: any_of_exprs('mean(sim_results@coef[, 2])')
  Hint: Call the second column of sim_results@coef and then take it's mean.

- Class: mult_question
  Output: "Would you like the code-generator to generate a code for you?"
  AnswerChoices: Yes;No
  CorrectAnswer: NULL
  AnswerTests: cs112_credit(941, "s7")
  Hint:

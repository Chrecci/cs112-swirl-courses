- Class: meta
  Course: CS112
  Lesson: Session 26 Regression Discontinuity Design II
  Author: Michael Chen
  Type: Standard
  Organization: Minerva University
  Version: 2.4.5
  
- Class: text
  Output: Welcome to the Swirl lesson for CS112 Session 26, Regression Discontinuity Design II.
      Please note that you can use the function rpt() to go back to the
      previous question. To end your Swirl session, you can type bye().
      After you exit a lesson, you can always resume a lesson by typing 
      swirl() again. However, make sure you use the same name you always use!
      Hit any key to continue!

- Class: text
  Output: This is the second of two lessons on regression discontinuity design (RDD). 
      After applying the method on synthetic data, we will move on to real data.
      We will also use a library called rdrobust to help with our analysis. 

- Class: text
  Output: First, make sure you have the package "rdrobust" installed and loaded.

- Class: cmd_question
  Output: We are using a dataset that comes with the library, related to senate voting. 
      Load the data by using data(rdrobust_RDsenate)
  CorrectAnswer: data(rdrobust_RDsenate)
  AnswerTests: any_of_exprs('data(rdrobust_RDsenate)', 'data("rdrobust_RDsenate")')

- Class: cmd_question
  Output: Save the dataset to an object called foo.
      Do so by foo <- rdrobust_RDsenate
  CorrectAnswer: foo <- rdrobust_RDsenate
  AnswerTests: any_of_exprs('foo <- rdrobust_RDsenate')

- Class: text
  Output: There are two variables, margin and vote.
      Margin is the difference between voting in year t (our x).
      Vote is the percentage of vote in year t+1 (our y).

- Class: text
  Output: The research question is, does the voting result (winning or losing) in the previous year affect the voting result in the following year?
      It could be framed as a regression discontinuity design question because the winning/losing margin can be very close. 
      When the margin is positive, then the party wins. When the margin is negative, the party loses. 

- Class: mult_question
  Output: Is this a sharp or fuzzy RDD? 
  AnswerChoices: Sharp RDD; Fuzzy RDD
  CorrectAnswer: Sharp RDD
  AnswerTests: omnitest(correctVal="Sharp RDD")
  Hint: What is the threshold? Does margin perfectly determines victory/loss? 

- Class: text
  Output: This is a sharp RDD because margin = 0 perfectly delineates the senate victories from the losses. 
      There is nothing fuzzy here. 

- Class: text
  Output: An important determination in RDD is defining the bandwidth.
      Bandwidth is the extent from the threshold we are looking left/right to estimate our treatment effect. 
      In the previous session, we arbitrarily defined 2 as the bandwidth. 

- Class: cmd_question
  Output: The rdrobust() function in the library allows us to define our own bandwidth. 
      The basic use of the function is defining the outcome (y), the covariate (x), the threshold (c), and the bandwidth (h).
      Let's try a bandwidth of 10. 
      Fill in this, summary(rdrobust(y=, x=, c=, h=)). 
  CorrectAnswer: summary(rdrobust(y=foo$vote, x=foo$margin, c=0, h=10))
  AnswerTests: any_of_exprs('summary(rdrobust(y=foo$vote, x=foo$margin, c=0, h=10))')
  Hint: Threshold is the boundary that separates victories from losses. 

- Class: text
  Output: Looking at the table produced, the treatment effect estimate is the coef.
      It comes with standard error, p values, and other statistics stuff.

- Class: cmd_question
  Output: With the same model specification, we can visualize it with a plot. 
      Fill in this, rdplot(y=, x=, binselect='es', h=10, x.label='Vote Share in Election at time t', y.label= 'Vote Share in Election at time t+1')
  CorrectAnswer: rdplot(y=foo$vote, x=foo$margin, binselect='es', h=10, x.label='Vote Share in Election at time t', y.label= 'Vote Share in Election at time t+1')
  AnswerTests: any_of_exprs("rdplot(y=foo$vote, x=foo$margin, binselect='es', h = 10, x.label='Vote Share in Election at time t', y.label= 'Vote Share in Election at time t+1')")
  Hint: Fill in the y and x, like before.

- Class: text
  Output: See how the model only fitted on the data within the defined bandwidth. 
      Visually, the gap at the vertical line at 0 indicates the treatment effect. 
      Numerically, the estimate is given by the rdrobust() function. 

- Class: text
  Output: You can use these two functions for your RDD analysis, with great flexibility. 

- Class: text
  Output: Now, let's revisit the question we posed earlier.
      How do we determine our bandwidth?
      It turns out that there are many algorithms that tries to find the optimal bandwidth.
      The rdrobust library offers multiple data-driven methods to do so.

- Class: cmd_question
  Output: We use a third function rdbwselect(), to see the bandwidth suggested by each algorithm.
      The all parameter indicates we want to see all the algorithms. 
      Fill in this, summaryrdbwselect(y=, x=, all=TRUE))
  CorrectAnswer: summary(rdbwselect(y=foo$vote, x=foo$margin, all = TRUE))
  AnswerTests: any_of_exprs('summary(rdbwselect(y=foo$vote, x=foo$margin, all = TRUE))')
  Hint: Fill in the y and x, like before.

- Class: text
  Output: Looking at the table, each row indicates an algorithm.
      BW est. (h) refers to the suggested bandwidth.
      BW bias (b) refers to the potential bias, which can be adjusted later. 

- Class: cmd_question
  Output: Usually the first method, mserd (which uses mean squared error to estimate bandwidth), is a sufficient method. 
      Here, it suggested a bandwidth of almost 17.7.
      We do not need to specify the h parameter when we are relying on rdbwselect.
      We specify a new parameter, bwselect, and set it to equal to 'mserd'. 
      Let's run the rdrobust function with the appropriate adjustment.  
  CorrectAnswer: summary(rdrobust(y=foo$vote, x=foo$margin, c = 0, bwselect='mserd'))
  AnswerTests: any_of_exprs("summary(rdrobust(y=foo$vote, x=foo$margin, c = 0, bwselect='mserd'))")
  Hint: Use the same rdrobust() as before, just deleting the h argument and adding bwselect.

- Class: text
  Output: Looking at the h, we confirm that the bandwidth is roughly 17.7.

- Class: cmd_question
  Output: Now let's do the same thing, but add a parameter.
      Put all=TRUE as the last argument.
  CorrectAnswer: summary(rdrobust(y=foo$vote, x=foo$margin, c = 0, bwselect='mserd', all=TRUE))
  AnswerTests: any_of_exprs("summary(rdrobust(y=foo$vote, x=foo$margin, c = 0, bwselect='mserd', all=TRUE))")

- Class: text
  Output: By setting all to true, we get to see the bias-adjusted results. 

- Class: exact_question
  Output: What is the bias-corrected causal estimate? Round to 1 decimal.
  CorrectAnswer: 7.5
  AnswerTests: omnitest(correctVal = "7.5")
  Hint: See the table. Round to 1 decimal.

- Class: exact_question
  Output: What is the bias-corrected 95% confidence interval of the causal estimate rom the 
      bias-corrected estimate? Copy and paste from the table, and put them in quotations.
      Round numbers to 1 decimal.
  CorrectAnswer: "[4.6 , 10.4]"
  AnswerTests: omnitest(correctVal = "[4.648 , 10.372]")
  Hint: In this format, "[x.x , xx.x]". Round to 1 decimal.

- Class: cmd_question
  Output: Now let's visualize it with a plot. 
      Use the rdplot() function, like before, but this time specifying the indicated bandwidth (h).
      Copy the following code as is, rdplot(y=foo$vote, x=foo$margin, binselect='es', h = 17.708, x.label='Vote Share in Election at time t', y.label= 'Vote Share in Election at time t+1')
  CorrectAnswer: rdplot(y=foo$vote, x=foo$margin, binselect='es', h = 17.708, x.label='Vote Share in Election at time t', y.label= 'Vote Share in Election at time t+1')
  AnswerTests: any_of_exprs("rdplot(y=foo$vote, x=foo$margin, binselect='es', h = 17.708, x.label='Vote Share in Election at time t', y.label= 'Vote Share in Election at time t+1')")
  Hint: Fill in the y and x, like before. Change h to the suggested bandwidth.

- Class: cmd_question
  Output: Another parameter in the rdplot() function is confidence interval. 
      It could give you an idea whether we have confidence in bandwidth region.
      Add the parameter ci=95 between binselect and h. 
  CorrectAnswer: rdplot(y=foo$vote, x=foo$margin, binselect='es', ci=95, h = 17.708, x.label='Vote Share in Election at time t', y.label= 'Vote Share in Election at time t+1')
  AnswerTests: any_of_exprs("rdplot(y=foo$vote, x=foo$margin, binselect='es',ci=95, h = 17.708, x.label='Vote Share in Election at time t', y.label= 'Vote Share in Election at time t+1')")
  Hint: Add the ci argument after the binselect argument.

- Class: text
  Output: It's good to see that we have narrower CIs in the bandwidth region. 
      Based on our result, we can see that having won a vote at the senate at time t
      has an effect of 7.5 on the vote share at time t+1. 
      The confidence interval is between 4 and 10, meaning we have confidence for the 
      causal direction.

- Class: text
  Output: That wraps up the introduction to the rdrobust package. 
      We learned several things.

- Class: text
  Output: 1) How to conduct RDD analysis with rdrobust with any bandwidth of our choosing.

- Class: text
  Output: 2) How to do some visualization with RDD, with confidence interval and different bandwidths.

- Class: text
  Output: 3) How to utilize algorithms that smart people came up with to select proper bandwidths.

- Class: text
  Output: 4) How to interpret the graphical and numerical results from the RDD analysis. 

- Class: text
  Output: This lesson is inspired by https://www.youtube.com/playlist?list=PLS6tnpTr39sFCr8amjT2Ld_FE34i26a3S. 

- Class: mult_question
  Output: "Would you like the code-generator to generate a code for you?"
  AnswerChoices: Yes;No
  CorrectAnswer: NULL
  AnswerTests: cs112_credit(941, "s26")
  Hint: 
